import {    sum, validateCpf, generateCpf, validateCnpj, generateCnpj, maskCnpj,    generateEmail, validateEmail, calcPercentage, debounce, isFunction,    isBoolean, isNumber, isEmptyString, isEvent, isDate, toCurrency, firstAndLastName, isUuidV4, uuidv4} from '../src'describe('debounce', () => {    //Debounce    test('it properly debounces function', () =>{        jest.useFakeTimers();        const func = jest.fn();        const debouncedFunction = debounce(func, 100);        debouncedFunction();        expect(func).not.toBeCalled();        jest.runTimersToTime(50);        expect(func).not.toBeCalled();        jest.runTimersToTime(100);        expect(func).toBeCalled();        expect(func.mock.calls.length).toBe(1);    });    test('it properly debounces function with isImmediate set to true ', () =>{        jest.useFakeTimers();        const func = jest.fn();        const debouncedFunction = debounce(func, 100, { isImmediate: true });        debouncedFunction();        expect(func).toBeCalled();        expect(func.mock.calls.length).toBe(1);        jest.runTimersToTime(50);        expect(func.mock.calls.length).toBe(1);        jest.runTimersToTime(100);        expect(func.mock.calls.length).toBe(1);    });})describe('tests', () => {    test('Sum 4 + 5 = 9', () => {        expect(sum(4, 5)).toBe(9)    });    test('Generate fake valid cpf, mask string', () => {        expect(generateCpf(true)).toHaveLength(14)    })    test('Generate fake valid cpf, only numbers', () => {        expect(generateCpf(false)).toHaveLength(11)    })    test('Validate cpf, with number fake (really)', () => {        expect(validateCpf(generateCpf(true))).toBe(true)    })    test('Cpf invalid', () => {        expect(validateCpf(12345)).toBe(false)        expect(validateCpf(40513673135)).toBe(false)        expect(validateCpf("123.145.567-12")).toBe(false)    })    test('Validate cpf without value', () => {        expect(validateCpf(undefined)).toBe(false)    })    test('valid formatted CNPJs', () => {        expect(validateCnpj('51.878.216/0001-95')).toBe(true)        expect(validateCnpj('87.344.783/0001-09')).toBe(true)    })    test('valid formatted CNPJs', () => {        expect(validateCnpj('51.878.216/0001-95')).toBe(true)        expect(validateCnpj('87.344.783/0001-09')).toBe(true)    })    test('valid unformatted CNPJs', () => {        expect(validateCnpj(15548368000166)).toBe(true)        expect(validateCnpj('95241373000160')).toBe(true)    })    test('invalid mixed string with non numeric characters', () => {        expect(validateCnpj('abcd11333977000147efgh')).toBe(false)        expect(validateCnpj('76aaa.bbb182ccc.ddd634eee/fff0001ggg-74')).toBe(false)    })    test('invalid formatted CNPJs', () => {        expect(validateCnpj('51.878.216/0001-11')).toBe(false)        expect(validateCnpj('87.344.783/0001-99')).toBe(false)    })    test('invalid unformatted CNPJs', () => {        expect(validateCnpj(15541368000126)).toBe(false)        expect(validateCnpj('45241173000169')).toBe(false)    })    test('invalid sequential CNPJs', () => {        expect(validateCnpj('11.111.111/1111-11')).toBe(false)        expect(validateCnpj('22.222.222/2222-22')).toBe(false)        expect(validateCnpj('33.333.333/3333-33')).toBe(false)        expect(validateCnpj('44.444.444/4444-44')).toBe(false)        expect(validateCnpj('55.555.555/5555-55')).toBe(false)        expect(validateCnpj(66666666666666)).toBe(false)        expect(validateCnpj(77777777777777)).toBe(false)        expect(validateCnpj(88888888888888)).toBe(false)        expect(validateCnpj(99999999999999)).toBe(false)        expect(validateCnpj('00000000000000')).toBe(false)    })    test('format CNPJ', () => {        expect(maskCnpj(15548368000166)).toBe('15.548.368/0001-66')        expect(maskCnpj('95241373000160')).toBe('95.241.373/0001-60')        expect(maskCnpj('a9b5c2d4e1f3g7h3i0j0k0l1m6n0o')).toBe('95.241.373/0001-60')    })    test('generate CNPJ', () => {        expect(validateCnpj(generateCnpj())).toBe(true)        expect(/^\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}$/.test(generateCnpj())).toBe(true)    })    test('generate and validate fake email', () => {        expect(validateEmail(generateEmail())).toBe(true)        expect(validateEmail(generateEmail(10))).toBe(true)        expect(validateEmail(generateEmail(20, 5))).toBe(true)    })    test('Calculate percentage', () => {        expect(calcPercentage(1530.80, 3060.80)).toBe(50.01)    })    test('sanity check', () => {        expect(!true).toBe(false);    });// describe('verify currency', () => {//// })test('convert number in BRL', () => {    // @ts-ignore    expect(toCurrency(12_300, 'R$')).toBe("R$ 12.300,00")    expect(toCurrency(12.30)).toBe("R$ 12,30")    expect(toCurrency(12.30, {        locale: 'pt-BR',        currency: '€'    })).toBe("€ 12,30")    expect(toCurrency(12.30, {        locale: 'pt-PT',        currency: '€'    })).toBe("12,30 €")})    test('first and last name', () => {        expect(firstAndLastName('Aguinaldo dos Santos Vieira Tupy')).toBe('Aguinaldo Tupy')        expect(firstAndLastName('Aguinaldo ')).toBe('Aguinaldo')        expect(firstAndLastName('')).toBe('')    })})describe('verification vars', () => {    test('is fn', () => {        const fn = jest.fn()        expect(isFunction(fn)).toBe(true)    })    test('not is number', () => {        expect(isNumber('10')).toBe(false)    })    test('not is boolean', () => {        expect(isBoolean('2')).toBe(false)    })    test('not is empty string', () => {        expect(isEmptyString('test')).toBe(false)    })    test('not is event', () => {        expect(isEvent('test')).toBe(false)    })    test('is event', () => {        let event = new CustomEvent('fake-event')        expect(isEvent(event)).toBe(true)    })    test('not is date', () => {        expect(isDate('tes')).toBe(false)    })    test('not is interface date from string date', () => {        expect(isDate('2020-10-01')).toBe(false)    })    test('is date', () => {        expect(isDate(new Date)).toBe(true)    })})describe('generate and validate uuid v4', () => {    test('create uuid v4', () => {        expect(isUuidV4(uuidv4())).toBe(true)    })    test('false uuid v4', () => {        expect(isUuidV4('aaa')).toBe(false)        expect(isUuidV4('111')).toBe(false)        expect(isUuidV4('0')).toBe(false)    })})beforeEach(() => {    jest.spyOn(console, 'warn').mockImplementation(() => {});});